package kr.happyjob.study.management.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import kr.happyjob.study.management.service.ManagementService;
import kr.happyjob.study.management.model.ManagementModel;

@Controller
@RequestMapping("/management/")
public class ManagementController {

	@Autowired
	ManagementService managementService;

	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();

	// 처음 로딩될 때 공지사항 연결
	@RequestMapping("userInfo.do")
	public String userInfo(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {

		logger.info("+ !!!!!~Start~!!! " + className + ".initUserInfo");
		logger.info("   - paramMap : " + paramMap);

		String loginID = (String) session.getAttribute("loginId");
		paramMap.put("loginID", loginID);

		return "management/userInfo";
	}
	
	@RequestMapping("userList.do")
	public String test1(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("+ Start " + className + ".initManagement");
		logger.info("   - paramMap : " + paramMap);
		
		int cpage = Integer.valueOf((String) paramMap.get("currentPage"));
		int pageSize = Integer.valueOf((String) paramMap.get("pageSize"));

		int startSeq = (cpage - 1) * pageSize;

		paramMap.put("startSeq", startSeq);
		paramMap.put("pageSize", pageSize);

		List<ManagementModel> userList = managementService.userList(paramMap);
		int userCnt = managementService.userListCnt(paramMap);

		model.addAttribute("user", userList);
		model.addAttribute("userCnt", userCnt);

		return "management/userList";
	}
	
	@RequestMapping("userDetail.do") // 내부 직원 상세 조회
	public String userDetail(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("+ Start " + className + ".initManagement");
		logger.info("   - paramMap : " + paramMap);
		
		//int cpage = Integer.valueOf((String) paramMap.get("currentPage"));
		//int pageSize = Integer.valueOf((String) paramMap.get("pageSize"));
		

		//int startSeq = (cpage - 1) * pageSize;

		//paramMap.put("startSeq", startSeq);
		//paramMap.put("pageSize", pageSize);

		List<ManagementModel> userList = managementService.userDetail(paramMap);
		//int userCnt = managementService.userListCnt(paramMap);

		model.addAttribute("user", userList); //여기에 데이터가 담겨서 전달된다. list같은 방식으로 데이터를 추출해서 출력시키면 됨
		//model.addAttribute("userCnt", userCnt);

		return "management/userDetail";
	}

	@RequestMapping("custDetail.do") // 기업 고객 상세 조회
	public String custDetail(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("+ Start " + className + ".initManagement");
		logger.info("   - paramMap : " + paramMap);

		List<ManagementModel> userList = managementService.custDetail(paramMap);

		model.addAttribute("user", userList);

		return "management/userDetail";
	}
	
	@RequestMapping("regist.do")
	@ResponseBody
	public Map<String, Object> regist(@RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("+ Start " + className + ".noticeSave");
		logger.info("   - paramMap : " + paramMap);

		Map<String, Object> resultMap = new HashMap<String, Object>();
		//String loginId = (String) session.getAttribute("loginId");
		//paramMap.put("loginId", loginId);
		int result = 0;
		String returnMsg = "";

		result = managementService.regist(paramMap);

		if (result > 0) {
			returnMsg = "success";
		} else {
			returnMsg = "fail";
		}

		resultMap.put("result", returnMsg);

		return resultMap;

	}
	
	@RequestMapping("userAjust.do")
	@ResponseBody
	public Map<String, Object> userAjust(@RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("+ Start " + className + ".noticeSave");
		logger.info("   - paramMap : " + paramMap);

		Map<String, Object> resultMap = new HashMap<String, Object>();
		int result = 0;
		String returnMsg = "";

		result = managementService.userAjust(paramMap);

		if (result > 0) {
			returnMsg = "success";
		} else {
			returnMsg = "fail";
		}

		resultMap.put("result", returnMsg);

		return resultMap;

	}
	
	@RequestMapping("userDelete.do")
	@ResponseBody
	public Map<String, Object> userDelete(@RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("+ Start " + className + ".!!userDelete!!");
		logger.info("   - paramMap : " + paramMap);

		Map<String, Object> resultMap = new HashMap<String, Object>();
		int result = 0;
		String returnMsg = "";

		result = managementService.userDelete(paramMap);

		if (result > 0) {
			returnMsg = "success";
		} else {
			returnMsg = "fail";
		}

		resultMap.put("result", returnMsg);

		return resultMap;

	}

}
