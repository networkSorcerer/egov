<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.notice.dao.NoticeDao">

	<!-- 목록 조회 -->
	<!-- 아래의 주석을 적는 이유는 에러 발생시 , 어디에서 에러가 발생했는지 같이 알려줄 수 있기 때문 -->
	<!-- 
		Mybatis 의 where 절 and, or 지원하여 자동으로 첫째 줄은 and/or 를 삭제해 줌
		if 구문을 통해서 조건이 만족된 경우만 아래의 choose 구문들을 실행  
		
		if -> 들어온 값이 널이 아니면~
		
	-->
	<select id="noticelist" resultType="kr.happyjob.study.notice.model.Noticevo">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticelist*/
		select an.notice_id
			  , ui.loginID 
		      , ui.name
		      , an.notice_tit
		      , DATE_FORMAT(an.regdate, '%y-%m-%d') as regdate
		      , an.hit
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    <where>
	    
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.notice_tit Like CONCAT('%', #{searchtitle}, '%')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ >= ]]> STR_TO_DATE(#{searchstdate}, '%Y-%m-%d')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ <= ]]> STR_TO_DATE(#{searcheddate}, '%Y-%m-%d')
			</if>
			
	    </where>

		ORDER BY an.regdate DESC
		LIMIT #{startpos}, #{pagesize}

	</select><!-- end 목록 조회 -->
	
	<!-- 총 갯수 조회 -->
	<select id="noticecnt" resultType="int">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticecnt*/
		select count(*)
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    <where>
	    
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.notice_tit Like CONCAT('%', #{searchtitle}, '%')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ >= ]]> STR_TO_DATE(#{searchstdate}, '%Y-%m-%d')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ <= ]]> STR_TO_DATE(#{searcheddate}, '%Y-%m-%d')
			</if>
			
	    </where>
			
	</select>
	
	<!-- 파일 x 신규 공지 등록 -->
	<!--
		notice_id 공지사항 번호는 max + 1
		login_id 는 세션에서 로그인 한 사람을 기준으로 가져와서 insert
	 -->
	<insert id="noticesave">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticesave*/
		<selectKey resultType="int" keyProperty="notice_id" order="BEFORE">
			select IFNULL(max(notice_id),0)+1
			from tb_adm_notice
		</selectKey>
		insert into tb_adm_notice 
					(	notice_id		
						, loginID		
						, notice_tit	
						, notice_con	
						, regdate		
						, hit	
					) values (
						#{notice_id}		
						, #{loginID}
						, #{ititle}	
						, #{icontent}	
						, now()		
						, 0
					)
	</insert>

	<!-- 파일 x 공지 수정 -->	
	<update id="noticeupdate">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticeupdate*/
		update tb_adm_notice
		set notice_tit = #{ititle}	, notice_con = #{icontent}
		where notice_id = #{notice_id}
	</update>

	<!-- 조회시 조회수 +1 -->
		<update id="noticehitupdate">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticehitupdate*/
		update tb_adm_notice
		set hit = hit +1
		where notice_id = #{notice_id}
	</update>
	
	<!-- 상세조회 -->
	<select id="noticedtl" resultType="kr.happyjob.study.notice.model.Noticevo">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticedtl*/
		select an.notice_id
			  , ui.loginID 
		      , ui.name
		      , an.notice_tit
		      , an.notice_con
		      , DATE_FORMAT(an.regdate, '%y-%m-%d') as regdate
		      , an.hit
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    where an.notice_id = #{notice_id}
	</select><!-- end 상세조회-->
	
	<!-- 공지 삭제 -->
	<delete id="noticedelete">
		delete
		from tb_adm_notice
		where notice_id = #{notice_id}
	</delete>
	
</mapper>