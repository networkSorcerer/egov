<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.study.employ.dao.EmploymentDao">

	<select id="empInfo" parameterType="HashMap"
		resultType="kr.happyjob.study.employ.model.EmploymentModel">
		select
			te.employ_id,
			tu.std_num,
			te.std_id,
			tu.name,
			tu.tel,
			te.comp_name,
			te.employ_day,
			te.resign_day,
			te.wp_state,
			te.reg_state
		from tb_employ te
		join tb_userinfo tu on tu.loginID = te.std_id
				<where>
			<if test="searchInfo != null and searchInfo != ''">
				<choose>
					<when test="searchKey eq 'name'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo},
						'%')
					</when>
					<when test="searchKey eq 'comp_name'.toString()">
						and te.comp_name LIKE CONCAT('%', #{searchInfo}, '%')
					</when>
					<when test="searchKey eq 'all'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo},
						'%')
						or te.comp_name LIKE CONCAT('%', #{searchInfo}, '%')
					</when>
					<otherwise>
						AND 1=2
					</otherwise>
				</choose>
			</if>
			<if test="employ_day != null">
				and te.employ_day is not null
			</if>
		</where>
		LIMIT #{startpos}, #{pageSize}
	</select>
		
	<select id="emp_Total" resultType="int">
		select
			count(*) as emp_Total
		from tb_employ te
		join tb_userinfo tu on tu.loginID = te.std_id
						<where>
			<if test="searchInfo != null and searchInfo != ''">
				<choose>
					<when test="searchKey eq 'name'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo},
						'%')
					</when>
					<when test="searchKey eq 'comp_name'.toString()">
						and te.comp_name LIKE CONCAT('%', #{searchInfo}, '%')
					</when>
					<when test="searchKey eq 'all'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo},
						'%')
						or te.comp_name LIKE CONCAT('%', #{searchInfo}, '%')
					</when>
					<otherwise>
						AND 1=2
					</otherwise>
				</choose>
			</if>
			</where>
	</select>
		
		<!-- 학생 목록 조회 -->
	<select id="stdList" parameterType="HashMap"
		resultType="kr.happyjob.study.employ.model.EmploymentModel">
            select
				ti.std_id,
			    tu.std_num,
			    tu.name,
			    tu.tel,
			    tu.sex,
			    tu.mail,
			    ti.lec_id,
			    tl.lec_name,
			    tu.join_date,
			  DATE_FORMAT(tl.start_date, '%Y-%m-%d') as start_date,
				DATE_FORMAT(tl.end_date, '%Y-%m-%d') as end_date
			from tb_userinfo tu
			join tb_lecstd_info ti on ti.std_id = tu.loginID
			join tb_lec_info tl on tl.lec_id = ti.lec_id
      left join tb_employ te on te.std_id = tu.loginID
        where te.employ_day is null
            <if test="std_id != null and std_id != ''">
            	and tu.loginID = #{std_id}
        	</if>
			<if test="searchInfo1 != null and searchInfo1 != ''">
				<choose>
					<when test="searchKey1 eq 't_name'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo1},
						'%')
					</when>
					<when test="searchKey1 eq 'lec_nm'.toString()">
						and tl.lec_name LIKE CONCAT('%', #{searchInfo1}, '%')
					</when>
					<when test="searchKey1 eq 'all1'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo1},
						'%')
						or tl.lec_name LIKE CONCAT('%', #{searchInfo1}, '%')
					</when>
					<otherwise>
						AND 1=2
					</otherwise>
				</choose>
			</if>
		group by ti.std_id
		LIMIT #{startpos}, #{pageSize}
	</select>	
		
	<select id="std_Total" resultType="int">
		select
			count(*) as std_Total	
		from tb_userinfo tu
        join tb_lecstd_info ti on ti.std_id = tu.loginID
        join tb_lec_info tl on tl.lec_id = ti.lec_id
		        <where>
			<if test="searchInfo1 != null and searchInfo1 != ''">
				<choose>
					<when test="searchKey1 eq 't_name'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo1},
						'%')
					</when>
					<when test="searchKey1 eq 'lec_nm'.toString()">
						and tl.lec_name LIKE CONCAT('%', #{searchInfo1}, '%')
					</when>
					<when test="searchKey1 eq 'all1'.toString()">
						and tu.name Like CONCAT('%', #{searchInfo1},
						'%')
						or tl.lec_name LIKE CONCAT('%', #{searchInfo1}, '%')
					</when>
					<otherwise>
						AND 1=2
					</otherwise>
				</choose>
			</if>
		</where>
	</select>
		
	<!-- 모달 학생 정보 가져오기 -->
	<select id="std_info" resultType="kr.happyjob.study.employ.model.EmploymentModel">
		select
			ti.std_id,
		    tu.std_num,
		    tu.name,
		    tu.tel,
		    tu.sex,
		    tu.mail,
		    ti.lec_id,
		    tl.lec_name,
		    DATE_FORMAT(tl.start_date, '%Y-%m-%d') as start_date,
			DATE_FORMAT(tl.end_date, '%Y-%m-%d') as end_date
		from tb_userinfo tu
		join tb_lecstd_info ti on ti.std_id = tu.loginID
		join tb_lec_info tl on tl.lec_id = ti.lec_id
		where tu.loginID = #{std_id}
	</select>	
		
	<select id="lec_count" resultType="int">
		select
			count(*) as lec_count	
		from tb_userinfo tu
        join tb_lecstd_info ti on ti.std_id = tu.loginID
        join tb_lec_info tl on tl.lec_id = ti.lec_id
        where tu.loginID = #{std_id}
	</select>	
	
		<!-- 모달 학생 정보 가져오기 -->
	<select id="std_detail" resultType="kr.happyjob.study.employ.model.EmploymentModel">
		select
			ti.std_id,
		    tu.std_num,
		    tu.name,
		    tu.tel,
		    tu.sex,
		    tu.mail,
		    ti.lec_id,
		    tl.lec_name,
		    DATE_FORMAT(tl.start_date, '%Y-%m-%d') as start_date,
			DATE_FORMAT(tl.end_date, '%Y-%m-%d') as end_date
		from tb_userinfo tu
		join tb_lecstd_info ti on ti.std_id = tu.loginID
		join tb_lec_info tl on tl.lec_id = ti.lec_id
		where tu.loginID = #{std_id}
	</select>		
		
	<!-- 회사명 가져오기 -->	
	<select id="compinfo" resultType="kr.happyjob.study.employ.model.EmploymentModel">
		select comp_name
       	from tb_employ
	</select>
	
	<!-- 취업 등록 모달 데이터 가져오기 -->	
	<select id="stdinfo" resultType="kr.happyjob.study.employ.model.EmploymentModel">
		 select 
			tu.loginID,
			tu.name,
			tu.tel,
			te.comp_name,
			te.employ_day
       	from tb_userinfo tu
       	left join tb_employ te on tu.loginID = te.std_id
        where user_type = "A" and loginID = #{std_id}
	</select>
	
	<!-- 취업 등록하기 -->
	<insert id="stdemploy">
       INSERT INTO 
       	tb_employ
       	(
       	std_id,
       	 comp_name,
      	 employ_day,
       	 resign_day
       	)
       VALUES (
       	 #{std_id},
       	 #{comp_name},
       	 #{employ_day},
       	 #{resign_day}
       )
	</insert>
	<!-- 취업목록 수정하기 -->
	<update id = "update_emp">
		update tb_employ
		set 
				comp_name = #{comp_name},
				employ_day = #{employ_day},
				resign_day = #{resign_day}
			
		where std_id = #{std_id}	
	</update>
	
	<delete id="delEmploy">
		delete from tb_employ
		where std_id = #{std_id}
	</delete>
	
		</mapper>