<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.std.dao.MyTestInfoDao">

	<!-- 나의 시험응시 목록 조회 -->
	<select id="myTestList" resultType="kr.happyjob.study.std.model.MyTestInfoVo">
		/*kr.happyjob.study.adv.dao.MyTestInfoDao.myTestList*/
		select  lec.lec_id
              , lec.lec_name
              , tut.loginID as tut_id
              , tut.name as tut_name
              , lec.test_id
              , tm.test_name
              , DATE_FORMAT( lec.test_start, '%Y.%m.%d') as test_start
              , DATE_FORMAT( lec.test_end, '%Y.%m.%d') as test_end
              , ls.test_yn
              , tu.pass
              , tu.test_score
              , tu.test_date
		from  tb_lecstd_info ls
 		 	join tb_lec_info lec on ls.lec_id = lec.lec_id
 		 	join tb_userinfo tut on lec.tutor_id = tut.loginID
 		 	join tb_testmaster tm on tm.test_id = lec.test_id
			<if test="(loginID != null) and (!loginID.equals(''))">
		    	left join tb_test_user tu on tu.lec_id = ls.lec_id and tu.std_id= #{loginID}
			</if>
		<where>
 	    	<if test="(loginID != null) and (!loginID.equals(''))">
		    	and ls.std_id = #{loginID}
			</if>
			<if test="(searchKey != null) and (!searchKey.equals(''))">
				<choose>
					<when test="(searchKey != null) and (searchKey eq 'ProceedingTest'.toString())">
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>=]]>DATE_FORMAT( lec.test_start, '%Y.%m.%d')
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[<=]]>DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
					<when test="(searchKey != null) and (searchKey eq 'LastTest'.toString())">
						AND  DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>]]> DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
				</choose>
			</if>
		</where>  
		ORDER BY lec.lec_id DESC
		<if test="(startPos != null) and (!startPos.equals('')) and (pageSize != null) and (!pageSize.equals(''))">
		LIMIT #{startPos}, #{pageSize}
		</if>
	</select><!-- end 나의 시험응시 목록 조회 -->
	
	<!-- 나의 시험응시 목록 총 갯수 조회 -->
	<select id="myTestListCnt" resultType="int">
		/*kr.happyjob.study.std.dao.MyTestInfoDao.myTestListCnt*/
		select count(*)
		from tb_lecstd_info ls
			join tb_lec_info lec on ls.lec_id = lec.lec_id
		<where>
 	    	<if test="(loginID != null) and (!loginID.equals(''))">
		    	and ls.std_id = #{loginID}
			</if>
			<if test="(searchKey != null) and (!searchKey.equals(''))">
				<choose>
					<when test="(searchKey != null) and (searchKey eq 'ProceedingTest'.toString())">
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>=]]>DATE_FORMAT( lec.test_start, '%Y.%m.%d')
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[<=]]>DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
					<when test="(searchKey != null) and (searchKey eq 'LastTest'.toString())">
						AND  DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>]]> DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
				</choose>
			</if>
		</where>  	      		      
	</select><!-- end 나의 시험응시 목록 총 갯수 조회 -->
	
	<!-- 시험문제 항목 조회 -->
	<select id="testItemList" resultType="kr.happyjob.study.std.model.TestDetailVo">	      
		select td.test_id
		     , tm.test_name as test_name
		     , tm.cnt
		     , tm.lec_type_id
		     , lt.lec_type_name
		     , td.test_num
		     , td.que_id
		     , tq.test_que
		     , tq.que_ans
		     , tq.que_ex1
		     , tq.que_ex2
		     , tq.que_ex3
		     , tq.que_ex4         
		from tb_test_detail td            
            join tb_testmaster tm on tm.test_id = #{test_id}         
        	join tb_lec_type lt on tm.lec_type_id=lt.lec_type_id
        	join tb_test_que tq on td.que_id = tq.que_id and tq.use_yn = 'y'                		
		where td.test_id = #{test_id}
    	ORDER BY td.test_num    	
	</select><!-- end 시험문제 항목 조회 -->
	
	<!-- 시험문제 항목 총 갯수 조회 -->
	<select id="testItemListCnt" resultType="int">
		/*kr.happyjob.study.std.dao.MyTestInfoDao.testItemListCnt*/
		select count(*)
		from tb_test_detail td
        	join tb_test_que tq on td.que_id = tq.que_id and tq.use_yn = 'y' 
		where td.test_id = #{test_id};	      		      
	</select><!-- end 시험문제 항목 총 갯수 조회 -->
	
	<!-- 시험응시 결과 등록 -->
	<insert id="registerTestUser">
		insert into tb_test_user
					(	lec_id
   					  , std_id
 					  , pass
					  , test_score
					  , test_date 
					) values (
					  #{lec_id}		
					  , #{std_id}
					  , #{pass}	
					  , ROUND(#{test_score})	
					  , now()		
					)
	</insert><!-- end 시험응시 결과 등록 -->
	
	<!--  시험응시 상세결과 등록 -->
	<insert id="registerTestResult">
		insert into tb_test_result
					(	lec_id
   					  , std_id
 					  , test_num
 					  , test_id
					  , answer
  					  , submit_answer
					  , chk_answer 
					) values (
					  #{lec_id}		
					  , #{std_id}
					  , #{test_num}
					  , #{test_id}					  
  					  , #{answer}
   					  , #{submit_answer}
  					  , #{chk_answer}
					)
	</insert><!-- end 시험응시 상세결과 등록 -->
	
	<!-- 시험 응시여부 컬럼 업데이트 -->
	<update id="updateLecStdInfoTestYn">	
	update tb_lecstd_info
		set test_yn = 'Y'
	where lec_id = #{lec_id} and std_id = #{std_id}
	</update><!-- end 시험 응시여부 컬럼 업데이트 -->
	
	<!-- 시험응시 결과 조회 -->
	<select id="searchTestUser" resultType="kr.happyjob.study.std.model.TestUserVo">	      
		select tu.lec_id
		 	 , lec.lec_name
		 	 , ui.name as tut_name
		 	 , lec.test_id
		 	 , tm.test_name		 	
		 	 , tu.std_id
		     , tu.pass
		     , tu.test_score
		     , DATE_FORMAT(tu.test_date, '%Y.%m.%d %H:%i') as test_date		     
		from tb_test_user tu
			 join tb_lec_info lec on lec.lec_id = tu.lec_id
             join tb_testmaster tm on tm.test_id = lec.test_id
             join tb_userinfo ui on ui.loginID = lec.tutor_id
		<where>
 	    	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and tu.lec_id = #{lec_id}
			</if>
 	    	<if test="(std_id != null) and (!std_id.equals(''))">
		    	and tu.std_id = #{std_id}
			</if>
		</where>		  	
	</select><!-- end 시험응시 결과 조회 -->
	
	<!-- 시험응시 상세결과 조회 -->
 	<select id="searchTestResult" resultType="kr.happyjob.study.std.model.TestResultVo">		
	 	select tr.lec_id
             , tr.std_id
             , tr.test_id
		     , tr.test_num
             , td.que_id as que_id
		     , tr.answer
		     , tr.submit_answer
		     , tr.chk_answer
             , tq.test_que as test_que
             , tq.que_ans as que_ans
             , tq.que_ex1 as que_ex1
             , tq.que_ex2 as que_ex2
             , tq.que_ex3 as que_ex3
             , tq.que_ex4 as que_ex4
		from tb_test_result tr
        	join tb_test_detail td on td.test_id=tr.test_id and td.test_num=tr.test_num
            join tb_test_que tq on tq.que_id=td.que_id
        <where>
 	    	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and tr.lec_id = #{lec_id}
			</if>
 	    	<if test="(std_id != null) and (!std_id.equals(''))">
		    	and tr.std_id = #{std_id}
			</if>
		</where>
		order by tr.test_num
	</select><!-- end 시험응시 상세결과 조회 -->
	
	
	<!-- 시험응시 상세결과 총 갯수 조회 -->
	<select id="searchTestResultCnt" resultType="int">
		/*kr.happyjob.study.std.dao.MyTestInfoDao.searchTestResultCnt*/
		select count(*)
		from tb_test_result tr
		<where>
 	    	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and tr.lec_id = #{lec_id}
			</if>
 	    	<if test="(std_id != null) and (!std_id.equals(''))">
		    	and tr.std_id = #{std_id}
			</if>
		</where>    		      
	</select><!-- end 시험응시 상세결과 총 갯수 조회 -->	
	
	
</mapper>