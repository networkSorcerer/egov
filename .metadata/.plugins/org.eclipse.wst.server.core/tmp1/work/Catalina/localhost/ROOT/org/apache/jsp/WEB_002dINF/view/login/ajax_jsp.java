/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2024-07-16 02:31:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<!-- response append를 사용해서 ajax 데이터 출력  & select를 통해서 내용을 선택하면 화면에 상세 내용이 나오도록 하기  +CRUD 만들기 \r\n");
      out.write("이건 이스트 에그처럼 '아이디'를 누르면 숨어있던 메뉴 베너가 나오고 클릭했을 때 내가 연습하는 모달창을 열수 있게 하자 \r\n");
      out.write("-->\r\n");
      out.write("<!-- 해피잡 이미지를 클릭하면 레드닷 게임을 할수 있도록 해보자  -->\r\n");
      out.write("<script >\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t$(\"#show\").hide();\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: \"/cust/custList1.do\",\r\n");
      out.write("        type: \"POST\", // POST 방식으로 요청\r\n");
      out.write("        dataType: \"json\", // 받아올 데이터 타입을 JSON으로 설정\r\n");
      out.write("        success: function(response) {\r\n");
      out.write("            var custList = response.custList; // 받아온 JSON 데이터에서 custList 배열 추출\r\n");
      out.write("            var html = \"\"; // 옵션 태그를 담을 문자열 초기화\r\n");
      out.write("            \r\n");
      out.write("            // custList 배열을 순회하며 옵션 태그 생성\r\n");
      out.write("            custList.forEach(function(item) {\r\n");
      out.write("                html += \"<option value='\" +item.cust_id+ \"'>\" + item.cust_name + \" (\" + item.cust_id + \")</option>\";\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // #list 요소에 생성된 옵션 태그 추가\r\n");
      out.write("            $(\"#list\").html(html);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            console.error(\"AJAX 오류 발생:\", error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("   \r\n");
      out.write("    \r\n");
      out.write("    $(\"#list\").change(function(){\r\n");
      out.write("    \tvar cust_id = $(this).val();\r\n");
      out.write("    \t$(\"#show\").show();\r\n");
      out.write("    \t$.ajax({\r\n");
      out.write("    \t\turl:\"/cust/custDetail.do\",\r\n");
      out.write("    \t\ttype:\"post\",\r\n");
      out.write("    \t\tdataType:\"json\",\r\n");
      out.write("    \t\tdata: { cust_id: cust_id },\r\n");
      out.write("    \t\t success: function (response) {\r\n");
      out.write("                 var custDetail = response.custDetail;\r\n");
      out.write("\t\t\t\tvar html= \"\";\r\n");
      out.write("                 // 기존에 있던 데이터 삭제\r\n");
      out.write("                 $(\"#customerDetail\").empty();\r\n");
      out.write("\r\n");
      out.write("                 // 고객 상세 정보 테이블에 행 추가\r\n");
      out.write("                 custDetail.forEach(function(item){\r\n");
      out.write("                \t html += \"<td>\" + item.cust_id + \"</td>\";\r\n");
      out.write("                     html += \"<td>\" + item.cust_name + \"</td>\";\r\n");
      out.write("                     html += \"<td>\" + item.cust_person + \"</td>\";\r\n");
      out.write("                     html += \"<td>\" + item.cust_person_ph + \"</td>\";\r\n");
      out.write("                 })               \r\n");
      out.write("                 $(\"#customerDetail\").append(html);\r\n");
      out.write("             },\r\n");
      out.write("             error: function(xhr, status, error) {\r\n");
      out.write("                 console.error(\"AJAX 오류 발생:\", error);\r\n");
      out.write("             }\r\n");
      out.write("    \t})\r\n");
      out.write("    })\r\n");
      out.write("    \r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<div > \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<select id=\"list\">\r\n");
      out.write("\t\t\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<table class=\"col\" id=\"show\">\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<td>고객 ID</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>고객사</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>고객사 담당자</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>고객사 담당 자 번호</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr id=\"customerDetail\">\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
